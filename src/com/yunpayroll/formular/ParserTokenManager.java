/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package com.yunpayroll.formular;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
			case 0:
				if ((active0 & 0x10000000780L) != 0L) {
					jjmatchedKind = 16;
					return 11;
				}
				if ((active0 & 0x200000000L) != 0L)
					return 1;
				if ((active0 & 0x400000000L) != 0L)
					return 13;
				return -1;
			case 1:
				if ((active0 & 0x80L) != 0L)
					return 11;
				if ((active0 & 0x10000000700L) != 0L) {
					jjmatchedKind = 16;
					jjmatchedPos = 1;
					return 11;
				}
				return -1;
			case 2:
				if ((active0 & 0x10000000700L) != 0L) {
					jjmatchedKind = 16;
					jjmatchedPos = 2;
					return 11;
				}
				return -1;
			case 3:
				if ((active0 & 0x400L) != 0L) {
					if (jjmatchedPos != 3) {
						jjmatchedKind = 16;
						jjmatchedPos = 3;
					}
					return 11;
				}
				if ((active0 & 0x10000000300L) != 0L)
					return 11;
				return -1;
			case 4:
				if ((active0 & 0x400L) != 0L)
					return 11;
				return -1;
			default:
				return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 33://'!'
				jjmatchedKind = 36;
				return jjMoveStringLiteralDfa1_0(0x8000000L);
			case 37://'%'
				return jjStopAtPos(0, 35);
			case 38://'&'
				return jjMoveStringLiteralDfa1_0(0x10000000L);
			case 40://'('
				return jjStopAtPos(0, 38);
			case 41://')'
				return jjStopAtPos(0, 39);
			case 42://'*'
				return jjStopAtPos(0, 32);
			case 43://'+'
				return jjStopAtPos(0, 30);
			case 44://','
				return jjStopAtPos(0, 21);
			case 45://'-'
				return jjStopAtPos(0, 31);
			case 46://'.'
				return jjStartNfaWithStates_0(0, 33, 1);
			case 47://'/'
				return jjStartNfaWithStates_0(0, 34, 13);
			case 59://';'
				return jjStopAtPos(0, 20);
			case 60://'<'
				jjmatchedKind = 23;
				return jjMoveStringLiteralDfa1_0(0x2000000L);
			case 61://'='
				jjmatchedKind = 19;
				return jjMoveStringLiteralDfa1_0(0x1000000L);
			case 62://'>'
				jjmatchedKind = 22;
				return jjMoveStringLiteralDfa1_0(0x4000000L);
			case 94://'^'
				return jjStopAtPos(0, 37);
			case 101://'e'
				return jjMoveStringLiteralDfa1_0(0x10000000100L);
			case 102://'f'
				return jjMoveStringLiteralDfa1_0(0x400L);
			case 105://'i'
				return jjMoveStringLiteralDfa1_0(0x80L);
			case 116://'t'
				return jjMoveStringLiteralDfa1_0(0x200L);
			case 123://'{'
				return jjStopAtPos(0, 41);
			case 124://'|'
				return jjMoveStringLiteralDfa1_0(0x20000000L);
			case 125://'}'
				return jjStopAtPos(0, 42);
			default:
				return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
			case 38:
				if ((active0 & 0x10000000L) != 0L)
					return jjStopAtPos(1, 28);
				break;
			case 61:
				if ((active0 & 0x1000000L) != 0L)
					return jjStopAtPos(1, 24);
				else if ((active0 & 0x2000000L) != 0L)
					return jjStopAtPos(1, 25);
				else if ((active0 & 0x4000000L) != 0L)
					return jjStopAtPos(1, 26);
				else if ((active0 & 0x8000000L) != 0L)
					return jjStopAtPos(1, 27);
				break;
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x400L);
			case 102:
				if ((active0 & 0x80L) != 0L)
					return jjStartNfaWithStates_0(1, 7, 11);
				break;
			case 108:
				return jjMoveStringLiteralDfa2_0(active0, 0x10000000100L);
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0x200L);
			case 124:
				if ((active0 & 0x20000000L) != 0L)
					return jjStopAtPos(1, 29);
				break;
			default:
				break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x400L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0x10000000100L);
			case 117:
				return jjMoveStringLiteralDfa3_0(active0, 0x200L);
			default:
				break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
			case 101:
				if ((active0 & 0x100L) != 0L) {
					jjmatchedKind = 8;
					jjmatchedPos = 3;
				} else if ((active0 & 0x200L) != 0L)
					return jjStartNfaWithStates_0(3, 9, 11);
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
			case 115:
				return jjMoveStringLiteralDfa4_0(active0, 0x400L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
			case 32:
				return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
			case 101:
				if ((active0 & 0x400L) != 0L)
					return jjStartNfaWithStates_0(4, 10, 11);
				break;
			default:
				break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
			case 105:
				return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
			default:
				break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
			case 102:
				return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
			default:
				break;
		}
		return jjStartNfa_0(5, active0);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
			case 40:
				if ((active0 & 0x10000000000L) != 0L)
					return jjStopAtPos(7, 40);
				break;
			default:
				break;
		}
		return jjStartNfa_0(6, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
	        0xffffffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L };
	static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
	static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
	static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 36;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
						case 13:
							if (curChar == 42)
								jjCheckNAddTwoStates(19, 20);
							else if (curChar == 47)
								jjCheckNAddStates(0, 2);
							break;
						case 0:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 11)
									kind = 11;
								jjCheckNAddStates(3, 7);
							} else if (curChar == 47)
								jjAddStates(8, 9);
							else if (curChar == 36) {
								if (kind > 16)
									kind = 16;
								jjCheckNAdd(11);
							} else if (curChar == 34)
								jjCheckNAddStates(10, 12);
							else if (curChar == 46)
								jjCheckNAdd(1);
							break;
						case 1:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAddTwoStates(1, 2);
							break;
						case 3:
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(4);
							break;
						case 4:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAdd(4);
							break;
						case 5:
							if (curChar == 34)
								jjCheckNAddStates(10, 12);
							break;
						case 6:
							if ((0xfffffffbffffdbffL & l) != 0L)
								jjCheckNAddStates(10, 12);
							break;
						case 8:
							if ((0x8400000000L & l) != 0L)
								jjCheckNAddStates(10, 12);
							break;
						case 9:
							if (curChar == 34 && kind > 15)
								kind = 15;
							break;
						case 10:
							if (curChar != 36)
								break;
							if (kind > 16)
								kind = 16;
							jjCheckNAdd(11);
							break;
						case 11:
							if ((0x3ff001000000000L & l) == 0L)
								break;
							if (kind > 16)
								kind = 16;
							jjCheckNAdd(11);
							break;
						case 12:
							if (curChar == 47)
								jjAddStates(8, 9);
							break;
						case 14:
							if ((0xffffffffffffdbffL & l) != 0L)
								jjCheckNAddStates(0, 2);
							break;
						case 15:
							if ((0x2400L & l) != 0L && kind > 5)
								kind = 5;
							break;
						case 16:
							if (curChar == 10 && kind > 5)
								kind = 5;
							break;
						case 17:
							if (curChar == 13)
								jjstateSet[jjnewStateCnt++] = 16;
							break;
						case 18:
							if (curChar == 42)
								jjCheckNAddTwoStates(19, 20);
							break;
						case 19:
							if ((0xfffffbffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(19, 20);
							break;
						case 20:
							if (curChar == 42)
								jjAddStates(13, 14);
							break;
						case 21:
							if ((0xffff7fffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(22, 20);
							break;
						case 22:
							if ((0xfffffbffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(22, 20);
							break;
						case 23:
							if (curChar == 47 && kind > 6)
								kind = 6;
							break;
						case 24:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 11)
								kind = 11;
							jjCheckNAddStates(3, 7);
							break;
						case 25:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 11)
								kind = 11;
							jjCheckNAdd(25);
							break;
						case 26:
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(26, 27);
							break;
						case 27:
							if (curChar != 46)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAddTwoStates(28, 29);
							break;
						case 28:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAddTwoStates(28, 29);
							break;
						case 30:
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(31);
							break;
						case 31:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAdd(31);
							break;
						case 32:
							if ((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(32, 33);
							break;
						case 34:
							if ((0x280000000000L & l) != 0L)
								jjCheckNAdd(35);
							break;
						case 35:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 13)
								kind = 13;
							jjCheckNAdd(35);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 0:
						case 11:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 16)
								kind = 16;
							jjCheckNAdd(11);
							break;
						case 2:
							if ((0x2000000020L & l) != 0L)
								jjAddStates(15, 16);
							break;
						case 6:
							if ((0xffffffffefffffffL & l) != 0L)
								jjCheckNAddStates(10, 12);
							break;
						case 7:
							if (curChar == 92)
								jjstateSet[jjnewStateCnt++] = 8;
							break;
						case 8:
							if ((0x14404410000000L & l) != 0L)
								jjCheckNAddStates(10, 12);
							break;
						case 14:
							jjAddStates(0, 2);
							break;
						case 19:
							jjCheckNAddTwoStates(19, 20);
							break;
						case 21:
						case 22:
							jjCheckNAddTwoStates(22, 20);
							break;
						case 29:
							if ((0x2000000020L & l) != 0L)
								jjAddStates(17, 18);
							break;
						case 33:
							if ((0x2000000020L & l) != 0L)
								jjAddStates(19, 20);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 0:
						case 11:
							if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
								break;
							if (kind > 16)
								kind = 16;
							jjCheckNAdd(11);
							break;
						case 6:
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjAddStates(10, 12);
							break;
						case 14:
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjAddStates(0, 2);
							break;
						case 19:
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjCheckNAddTwoStates(19, 20);
							break;
						case 21:
						case 22:
							if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								jjCheckNAddTwoStates(22, 20);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates =
	        { 14, 15, 17, 25, 26, 27, 32, 33, 13, 18, 6, 7, 9, 21, 23, 3, 4, 30, 31, 34, 35, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ((jjbitVec2[i2] & l2) != 0L);
			default:
				if ((jjbitVec0[i1] & l1) != 0L)
					return true;
				return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
			case 0:
				return ((jjbitVec4[i2] & l2) != 0L);
			case 48:
				return ((jjbitVec5[i2] & l2) != 0L);
			case 49:
				return ((jjbitVec6[i2] & l2) != 0L);
			case 51:
				return ((jjbitVec7[i2] & l2) != 0L);
			case 61:
				return ((jjbitVec8[i2] & l2) != 0L);
			default:
				if ((jjbitVec3[i1] & l1) != 0L)
					return true;
				return false;
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, "\151\146",
	        "\145\154\163\145", "\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, null, null,
	        null, "\75", "\73", "\54", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\46\46", "\174\174",
	        "\53", "\55", "\52", "\56", "\57", "\45", "\41", "\136", "\50", "\51", "\145\154\163\145\40\151\146\50",
	        "\173", "\175", };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x7fffff9af81L, };
	static final long[] jjtoSkip = { 0x7eL, };
	protected JavaCharStream input_stream;
	private final int[] jjrounds = new int[36];
	private final int[] jjstateSet = new int[72];
	protected char curChar;

	/** Constructor. */
	public ParserTokenManager(JavaCharStream stream) {
		if (JavaCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public ParserTokenManager(JavaCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(JavaCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 36; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(JavaCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
			        TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
			        TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
